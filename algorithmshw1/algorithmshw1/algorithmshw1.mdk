Title         : MPCS 55001 Algorithms Autumn 2016
Subtitle      : Homework 1
Author        : Christine Chung
Logo          : False

[TITLE]

# Problem 1
Consider the following mergesort variant: instead of dividing a list of n elements into two halves, we divide it into three thirds of approximately equal size. Then we recursively sort each third and merge the three lists by comparing their respective first elements and taking the smallest.

- Write pseudocode for a 3-way merge procedure that takes as input three sorted lists each of size n/3. (You may assume n is a power of 3.) Pay careful attention to the formulas for interval endpoints. Your algorithm should run in O(n) time. (3 points)
  ## Algorithm 1: Merge
  **Input** A, B, C are all subarrays of size n/3
  
  **Output** result, a sorted array of size n
  
  ```
  1: procedure Merge(A, B, C)
  2:    length = A.length
  2:    result := [0...length*3 - 1]
  3:    j := 0
  4:    k := 0
  5:    l := 0
  6:    Aprime = [0...length] //create 3 new empty arrays of size length + 1
  7.    Bprime = [0...length]
  8     Cprime = [0...length]
  9.    Aprime[length] = infinity //add sentinel to each new array
 10.   Bprime[length] = infinity
 11.   Cprime[length] = infinity
 12.   for i := 0 to length do //add original elements from each subarray to each new array
 13.        Aprime[i] = A[i]
 14.        Bprime[i] = B[i]
 15.        Cprime[i] = C[i]   
 16:   for i:= 0 to result.length do
 17:         if A[j] <= B[k]
 18:            if A[j] <= C[l]
 19:                result[i] := A[j] // Insert A[j] into the result array
 20:                j += 1 // Increment A counter by 1
 21:            else
 22:                result[i] := C[l]
 23:                l += 1
 24:            end if
 25:        else if B[k] <= C[l]
 26:            result[i] := B[k]
 27:            k += 1
 28:        else
 29:            result[i] := C[l]
 30:            l += 1
 31:        end if
 32:    end for
 33:    return result

 ```

- Explain clearly and concisely why your algorithm is correct. Restatements of steps of the algorithm will receive no credit. (1 point)

  **Initialization** In order to avoid checking to see if we've reached the end of any sub array, we first duplicate each subarray and add a sentinel (infinity) to the end of each array. Then, we initialize an empty array. We know that all of the input sub-arrays are already sorted. Therefore, the smallest element will be the first element in one of the three sub arrays. Therefore, we compare all three numbers, and insert the smallest one into the results array. The results array is sorted because it only has one element in it.

  **Maintenance** Every time we insert something from a sub-array to the results array, we move the cursor up one in the subarray. Then, in the next iteration of the for loop, we compare 3 numbers. One of these numbers is guaranteed to be the next smallest. If we take the smallese of the 3 and add it to the result array, the result array will always be sorted. 
  
  **Termination** At termination i = n. This means n elements have been copied into the result array. At each iteration, we copy the smallest of 3 elements into the result array. That means at termination, all but the largest numbers should be in the result array. The largest numbers are the 3 sentinels we added at the beginning. Therefore, all of the elements are now in one array in sorted order.

- Write pseudocode for a 3-way mergesort algorithm. Use your 3-way merge procedure as a subroutine. (1 point)
  ## Algorithm 2: Merge Sort
  **Input** A, B, C are all subarrays of size n/3
  
  **Output** result, a sorted array of size n
  
  ```
  1: procedure MergeSort(A) // A is an array of size n
  2:    n = A.length
  3:    if n <= 1
  4:        return A
  5:    k := n/3 //take ceiling if n is not a multiple of 3
  6:    m = 2n/3 //also take ceil if n is not multiple of 3
  7:    return Merge(MergeSort(A[0...k - 1]), MergeSort(A[k...m - 1], MergeSort(A[m...n - 1]))

  ```
- Let T(n) denote the running time of 3-way mergesort on an array of size n. Write a recurrence for T(n) and solve it using the master theorem. (1 point)
  - T(n) = 3T(n/3) + O(n) //Call MergeSort 3 times recursively, then O(n) for the single Merge call
  - Using the master theorem, **a** = 3, **b** = 3, and **c** = 1
  - Because log~3~^3^ = 1, w are dealing with case 2 of the master theorem.
  - Therefore, T(n) = &Theta;(nlog(n))
- Is 3-way mergesort asymptotically faster than insertion sort? Prove your answer. (Hint: Take the limit of the ratio of the running times as n → ∞.) (1 point)
  - According to the book, insertion sort runs in O(n^2^) time, which is asymptotically slower.
- Is 3-way mergesort asymptotically faster than ordinary mergesort? Prove your answer. (Hint: see previous hint.) (1 point) 
  - According to the book, ordinary mergesort runs in the same time as 3-way mergesort.
[reference manual]: http://research.microsoft.com/en-us/um/people/daan/madoko/doc/reference.html  "Madoko reference manual"
