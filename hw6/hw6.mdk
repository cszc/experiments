Title         : MPCS 55001 Algorithms Autumn 2016
Subtitle      : Homework 6
Author        : Christine Chung
Logo          : False

[TITLE]

# Problem 1
- Describe: In my implementation of DFS without recursion, DFS remains the same but DFS-Visit uses a stack instead of recursion. Each time a vertex is discovered, it is marked as gray and added to the stack. New popped vertices are taken off the top of the stack, so the last one added is the new one popped. Therefore, vertices are added and taken off in parentheses format. If a popped vertex is gray, that means all of its child vertices have already been visited, so it is marked as Black and taken permanently off of the stack.
- Pseudocode:
    ```
    procedure DFS-Visit(G, u) //G is a graph, u is a starting vertex
    1:    let S be a new stack //with methods pop and push
    2:    S.push(u) //add u to the stack
    3:    while S is not empty
    4:        v = S.pop() //take a vertex off the top of the stack
    5:        time = time + 1
    6:        if v.color == WHITE
    7:           v.d = time
    8:           v.color = GRAY
    9:           S.push(v)
    10:          for each w in G.Adj[v]
    11:              time = time + 1
    12:              if w.color = WHITE
    13:                   w.color = GRAY
    14:                   w.pi = v
    15:                   w.d = time
    16:                   S.push(w)
    17:        else if v.color == GRAY
    18:           v.color = BLACK
    19:           v.f = time
    ```
- 
# Problem 2
- Pseudocode:
  ```
    procedure DFS(G)
    1:    for each vertex u in G.V.
    2:        u.color = WHITE
    3:        u.pi = NIL
    4:    time = 0
    5:    for each vertex u in G.V.
    6:        if u.color == WHITE
    7:            if DFS-VISIT(G, u)
    8:                return True
    9:    return False //Never returned True, so there are no cycles in the Graph
    
    procedure DFS-Visit(G, u)
    1:    time = time+1
    2:    u.d = time
    3:    u.color = GRAY
    4:    
    5:    for each vertex u in G.Adj[u]
    6:        if u.color == WHITE
    7:            DFS-VISIT(G, u)
    9:        else //If the color is Gray or Black, it's already been visited, meaning that have found a cycle
    10:           return True //
    11:   u.color = BLACK
    12:   time = time + 1
    13:   u.f = time
    14:   return False
    ```
- Correctness
- Analyze
- Modify
    
#Problem 3
-
  ```
    procedure Longest-Path(G) //G is a DAG
      G' = Topological-Sort(G) // returns a linked list of vertices in topologically sorted order
      max_dist = 0
      for each v in G'
          
    ```